/* eslint-disable @typescript-eslint/explicit-function-return-type */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/explicit-member-accessibility */
import { Header } from "./Header";

class Definitions {
    constructor(f: any) {
        this.f = f
        this.defineJs(f)

        f.defjs = this.defjs
        f.defvar = this.defvar
        f.compiling = this.compiling
        f.compileEnter = this.compileEnter
        f.findDefinition = this.findDefinition
        f._latest = this.latest;
        f._lit = this._lit;
    }

    f: any;

    defheader = (name: string | null, immediate: boolean = false, hidden: boolean = false) => {
        this.f.dataSpace.push(new Header(this.latest(), name, immediate, hidden, this.f.dataSpace.length + 1));
        this.latest(this.f.dataSpace.length - 1);
    }

    defjs = (name: string, fn: Function, immediate: boolean = false, displayName: string | undefined = undefined) => {
        this.defheader(displayName || name, immediate);
        this.f.dataSpace.push(fn);
        return fn;
    };

    defvar = (name: string, initial: any) => {
        this.defheader(name);
        var varAddress = this.f.dataSpace.length + 1;
        this.f.dataSpace.push(function variable(this: Definitions) {
            this.f.stack.push(varAddress);
        });
        this.f.dataSpace.push(initial);

        return function (this: Definitions, value: number) {
            if (value !== undefined)
                this.f.dataSpace[varAddress] = value;
            else
                return this.f.dataSpace[varAddress];
        };
    };

    latest: Function = () => {
        if (this.f.dataSpace) {
            return this.defvar("latest", this.f.dataSpace.length);
        } else {
            return () => {
                return null
            }
        }
    }

    compileEnter = (name: string) => {
        var instruction = this.f.dataSpace.length + 1;

        var enter;
        try {
            enter = eval(`(
                function ${name}() {
                    f.returnStack.push(f.instructionPointer);
                    f.instructionPointer = instruction;
                })
            `);
        } catch (e) {
            // Failback for names that are invalid identifiers
            enter = function enter(this: Definitions) {
                this.f.returnStack.push(this.f.instructionPointer);
                this.f.instructionPointer = instruction;
            };
        }

        this.f.dataSpace.push(enter);
        return enter;
    };

    findDefinition = (word: string) => {
        var current = this.latest();
        while (current !== null) {
            var wordDefinition = this.f.dataSpace[current];
            // Case insensitive
            if (wordDefinition.name && wordDefinition.name.toLowerCase() == word.toLowerCase() && !wordDefinition.hidden)
                return wordDefinition;
            current = wordDefinition.link;
        }
        return current;
    };

    exit = this.defjs("exit", function exit(this: Definitions) {
        this.f.instructionPointer = this.f.returnStack.pop();
    });

    compiling: Function = this.defvar("state", 0)

    _lit = this.defjs("lit", function lit(this: Definitions) {
        this.f.stack.push(this.f.dataSpace[this.f.instructionPointer]);
        this.f.forth.instructionPointer++;
    });

    defineJs = (f: any) => {
        f.defjs(":", function colon() {
            var name = f._readWord();
            f.defheader(name, false, true);
            f.compileEnter(name);
            f.compiling(true);
        });

        f.defjs(":noname", function noname(this: Definitions) {
            this.defheader(null, false, true);
            f.stack.push(f.dataSpace.length);
            f.compileEnter("_noname_");
            f.compiling(true);
        });


        f.defjs(";", function semicolon(this: Definitions) {
            f.dataSpace.push(this.exit);
            f.dataSpace[this.latest()].hidden = false;
            f.compiling(false);
        }, true); // Immediate

        f.defjs("find", function find() {
            var input = f.stack.pop();
            var word = input;
            if (typeof input === "number") {
                var startPosition = input;
                var length = f._getAddress(startPosition);
                word = "";
                for (var i = 1; i <= length; i++) {
                    word += String.fromCharCode(f._getAddress(startPosition + i));
                }
            }
            var definition = f.findDefinition(word);
            if (definition) {
                f.stack.push(definition.executionToken);
                f.stack.push(definition.immediate ? 1 : -1);
            } else {
                f.stack.push(input);
                f.stack.push(0);
            }
        });

        // Converts an execution token into the data field address
        f.defjs(">body", function dataFieldAddress() {
            f.stack.push(f.stack.pop() + 1);
        });

        f.defjs("create", function create(this: Definitions) {
            this.defheader(f._readWord());
            var dataFieldAddress = f.dataSpace.length + 1;
            f.dataSpace.push(function pushDataFieldAddress() {
                f.stack.push(dataFieldAddress);
            });
        });

        f.defjs("allot", function allot() {
            f.dataSpace.length += f.stack.pop();
        });

        f.defjs(",", function comma() {
            f.dataSpace.push(f.stack.pop());
        });

        f.defjs("compile,", function compileComma() {
            f.dataSpace.push(f.dataSpace[f.stack.pop()]);
        });

        f.defjs("[", function lbrac() {
            f.compiling(false); // Immediate
        }, true); // Immediate

        f.defjs("]", function rbrac() {
            f.compiling(true); // Compile
        });

        f.defjs("immediate", function immediate(this: Definitions) {
            var wordDefinition = f.dataSpace[this.latest()];
            wordDefinition.immediate = true;
        });

        f.defjs("hidden", function hidden() {
            var wordDefinition = f.dataSpace[f.stack.pop()];
            wordDefinition.hidden = !wordDefinition.hidden;
        });

        f.defjs("'", function tick() {
            f.stack.push(f.findDefinition(f._readWord()).executionToken);
        });

        f.defjs("[']", function bracketTick() {
            f.dataSpace.push(f._lit);
            f.dataSpace.push(f.findDefinition(f._readWord()).executionToken);
        }, true);

        f.defjs("marker", function marker(this: Definitions) {
            var savedLatest = this.latest();
            var savedLength = f.dataSpace.length;

            this.defheader(f._readWord());
            f.dataSpace.push(function marker(this: Definitions) {
                this.latest(savedLatest);
                f.dataSpace.length = savedLength;
            });
        });
    }
}

export default Definitions;